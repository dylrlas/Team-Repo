pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--cs477 pgp project
--developed by: radical ascension
--"battle of chaos"


--basic game logo on the splash screen
--create game dev. logo

function create_logo()
--clears section
cls()
	sfx(1)
	local c=0
while (c < 190) do
		--tv monster appears
		if(c==15) then
		 	spr(64, 68, 81, 2, 2)
		end
		if (c>124) then
    spr(32,55,68)
    elseif (c>60) then
    spr(32,55,68)
    elseif (c>28) then
    spr(32,65,68)
    elseif (c>13) then
    spr(32,75,68)
    else
    spr(32,85,68)
    end
 	if (c>60) then
    spr(32,55,60)
    print("radical ascension",41,50,8)
    end
    flip() 
    c+=1
  end
end


--basic character movement
function _init()
create_logo()

--clears screen 
cls(0)


--play the retro combat music
sfx(5)
sfx(6)
sfx(7)
sfx(8)
sfx(9)
sfx(10)
sfx(11)
sfx(12)


--start of player class
warrior={
sp = 1,
x = 0,
y = 10,
w = 8,
h = 7,
dx = 2,
dy = 3,
  flp = false,
 	moving=false,
		jumping=false,
		falling=false,
}

--enemy class
enemies = {}
enemies[1] = {}
enemies[1].x = 60
enemies[1].y = 90
enemies[2] = {}
enemies[2].x = 50
enemies[2].y = 100
enemies[3] = {}
enemies[3].x = 100
enemies[3].y = 40


--box collisions between player and enemy
tiles = {}
tiles = {}
tiles[1] = {}
tiles[1].x = 40
tiles[1].y = 48
tiles[2] = {}
tiles[2].x = 48
tiles[2].y = 48
tiles[3] = {}
tiles[3].x = 40
tiles[3].y = 56
tiles[4] = {}
tiles[4].x = 56
tiles[4].y = 48
tiles[5] = {}
tiles[5].x = 64
tiles[5].y = 48
tiles[6] = {}
tiles[6].x = 32
tiles[6].y = 48
tiles[7] = {}
tiles[7].x = 24
tiles[7].y = 48

--gameover flag
gameover = false

--initialize goal table
goal = {}
visit = {}

--ammo counter
ammo = {
sp = 7,
x = 1,
y = 118,
w = 2,
h = 2,
}

--bullet array
buls = {}

--physics components for player
gravity = 0.5
friction = 0.80

--set player max health and max armor
health = 100
armor = 100

--initialize bullet statement
bulx = 64
buly = 40
missx = 64
missy = 70

--collision detection function
function col(a,b)
 local a_left=a.x
 local a_top=a.y
 local a_right=a.x+a.colw-1
 local a_bottom=a.y+a.colh-1
 
 local b_left=b.x
 local b_top=b.y
 local b_right=b.x+b.colw-1
 local b_bottom=b.y+b.colh-1

 if a_top>b_bottom then return false end
 if b_top>a_bottom then return false end
 if a_left>b_right then return false end
 if b_left>a_right then return false end
 
 return true
end

--random generation of level
function genlevel()

  --clear and reset tiles
   --tiles = {}
    
  for i = 1,14 do
     visit[i] = {}
    for j = 1, 14 do
      visit[i][j] = {}
      visit[i][j].x = i
      visit[i][j].y = j
      visit[i][j].v = 0
      
     if flr(rnd(5)) == 0 and i != 1 and j != 1 then
       temp = {}
       temp.x = i
       temp.y = j
       temp.s = 2
       add(tiles, temp)
       visit[i][j].v = 1
     end
    end
   end
   
   --initialize the queue and tiles
   t = {}
   t[1] = visit[1][1]
   visit[1][1].x = 2
   while #t != 0 do
      temp = t[1]
      del(t,t[1])
      
      if temp.y < 14 then
        if visit[temp.x][temp.y+1].v == 0 then
          visit[temp.x][temp.y+1].v = 2
          add(t,visit[temp.x][temp.y+1])
          end
         end
         if temp.x < 14 then
           if visit[temp.x+1][temp.y].v == 0 then
             visit[temp.x+1][temp.y].v = 2
             add(t,visit[temp.x+1][temp.y])
           end
          end
        end
   
  k = true
  while k do
    i = flr(rnd(8))+6
    j= flr(rnd(8))+6
    k = false
    for q in all (tiles) do
      if i == q.x and j == q.y then
        k = true
       end
      end
      
      if visit[i][j].v != 2 then
        k = true
      end
   goal.x = i
   goal.y = j
  end
end
 
--call genlevel() function
genlevel()
 
--check if player collected the eye
function goalcheck()
  if warrior.x == (goal.x*8) and warrior.y == (goal.y*8) then
   warrior.x = 8
   warrior.y = 8
   genlevel()
 end
end  


--detects when boxes collide with other game objects
function encollide(x1,y1,x2,y2)
  return (x2 > x1 + 8 or x2 + 8 < x1 or y2 > y1 + 8 or y2 +8 < y1) == false
end   

--distance between enemies and player
function distance(x1, y1)
  return abs(warrior.x - x1) + abs(warrior.y - y1)
end 

--enemy should collide with tiles like player does
function tilecollide(x1,y1)
  temp = false
  for i in all (tiles) do
    if encollide(x1,y1,i.x,i.y) then
       temp = true
      end
    end
    return temp
end
  
--add health loot
health_pickups = {}
for i = 1,20 do
   local health_loot = {
     sp = 2,
     x = flr(rnd(16))*8,
     y = flr(rnd(16))*8,
   }
   add(health_pickups, health_loot)
 end

--add armor loot
armor_pickups = {}
for i = 1,20 do
   local armor_loot = {
     sp = 6,
     x = flr(rnd(16))*8,
     y = flr(rnd(16))*8,
   }
   add(armor_pickups, armor_loot)
   end
end

--start of update function
function _update()
warrior.dy += gravity
warrior.dx *= friction


--control scheme
--moves down and player collides with platform
if btn(⬇️) then
warrior.y += 2
end

for i in all (tiles) do
if tilecollide(warrior.x,warrior.y,i.x,i.y) then
   warrior.y -= 2
   break
   end
 end

--move up and player collides with platform
if btn(⬆️) then
warrior.y -= 2
end

for i in all (tiles) do
if tilecollide(warrior.x,warrior.y,i.x,i.y) then
   warrior.y += 2
   break
   end
  end

--move left and player collides with platform
if btn(⬅️) then
warrior.x -= 2
end

for i in all (tiles) do
if tilecollide(warrior.x,warrior.y,i.x,i.y) then
   warrior.x += 2
   break
   end
 end

--move right and player collides with platform
if btn(➡️) then
warrior.x += 2
end
 
for i in all (tiles) do
if tilecollide(warrior.x,warrior.y,i.x,i.y) then
   warrior.x -= 2
   break
   end
  end

  
--move laser bullets fired from character 
if btnp(4) then
   bulx = warrior.x 
   buly = warrior.y 
   sfx(4)
end

--move heat seeking missile from character to enemy
if btnp(5) then
   missx = warrior.x
   missy = warrior.y
   sfx(13)
end
 

---------------------------------
--move the player bullets
for bul in all (buls) do
  for i = #buls,1,-1 do
  local mybul = buls[i]
  mybul.y = mybul.y - 4
  
  if mybul.y < -8 then
    del(buls, mybul)
  end
 end 
end

--change bullet direction based on player direction
if warrior.flp then
  bulx -= 6
  
elseif not warrior.flp then
  bulx += 6
end


--change bullet direction based on player direction
if warrior.flp then
  missx -= 6
  
elseif not warrior.flp then
  missx += 6
end

 
 --collsion enemy x bullets
 --enemy dies when shot instantly
  for myen in all (enemies) do
    for mybul in all (buls) do
     if bulx == enemies[1].x then
      del(enemies, myen)
   end
  end
end

--collsion enemy x missiles
 --enemy dies when shot instantly
 for myen in all (enemies) do
   for mybul in all (buls) do
    if bulx == enemies[2].x then
     del(enemies, myen)
     end
   end
end

--collsion enemy x missiles
 --enemy dies when shot instantly
for myen in all (enemies) do
 for mybul in all (buls) do
    if bulx == enemies[3].x then
   del(enemies, myen)
   end
 end
end


-------------------------------------

--keeps character in same scene without them moving on screen
warrior.x = mid(0,120,warrior.x)
warrior.y = mid(0,120,warrior.y)


--spawn health loot onto map
for health_loot in all (health_pickups) do
  if health_loot.x == warrior.x and health_loot.y == warrior.y then
    health += 10
    del(health_pickups, health_loot)
    sfx(0)
  end

  
  --do not let health exceed 100 hp
  if health >= 100 then
      health = 100
  end
end
 
--spawn armor loot onto map
for armor_loot in all (armor_pickups) do
  if armor_loot.x == warrior.x and armor_loot.y == warrior.y then
    armor += 5
    del(armor_pickups, armor_loot)
    sfx(3)
  end

  
  --do not let armor exceed 100hp
  if armor >= 100 then
      armor = 100
  end
 end

-----------------------------------------------------

 

--------------------------------------------------------------
--basic ai enemy movement
--enemy 1 moves to chase player if distance is close
if distance(enemies[1].x, enemies[1].y) < 80 then
 if abs(warrior.x - enemies[1].x) > abs (warrior.y - enemies[1].y) then
   if(warrior.x - enemies[1].x < 0) then
   if tilecollide(enemies[1].x, enemies[1].y) == false then
     enemies[1].x -= 1
   end
  else 
     if tilecollide(enemies[1].x, enemies[1].y) == false then 
    enemies[1].x += 1
  end
 end 
  
else
   if(warrior.y - enemies[1].y) < 0 then
    if tilecollide(enemies[1].x, enemies[1].y) == false then 
     enemies[1].y -= 1
   end
  else
    if tilecollide(enemies[1].x, enemies[1].y) == false then 
    enemies[1].y += 1
   end
  end
 end 
end
---------------------------------------------------
--checks where player is in respect to enemy two position
if distance(enemies[2].x, enemies[2].y) < 80 then
 if abs(warrior.x - enemies[2].x) > abs (warrior.y - enemies[2].y) then
   if(warrior.x - enemies[2].x < 0) then
    if tilecollide(enemies[2].x, enemies[2].y) == false then
      enemies[2].x -= 1
    end
  else
    if tilecollide(enemies[2].x, enemies[2].y) == false then 
    enemies[2].x += 1
   end 
  end
  
else
   if(warrior.y - enemies[2].y) < 0 then
   if tilecollide(enemies[2].x, enemies[2].y) == false then
   enemies[2].y -= 1
  end
 
 else
  if tilecollide(enemies[2].x, enemies[2].y) == false then
    enemies[2].y += 1
    end
  end
 end
end 

---------------------------------------------------------------------
--checks where player is in respect to enemy three position
if distance(enemies[3].x, enemies[3].y) < 80 then
 if abs(warrior.x - enemies[3].x) > abs (warrior.y - enemies[2].y) then
   if(warrior.x - enemies[3].x < 0) then
    if tilecollide(enemies[3].x, enemies[3].y) == false then
      enemies[3].x -= 1
    end
  else 
    if tilecollide(enemies[3].x, enemies[3].y) == false then
    enemies[3].x += 1
  end 
 end
  
else
   if(warrior.y - enemies[3].y) < 0 then
     if tilecollide(enemies[3].x, enemies[3].y) == false then
      enemies[3].y -= 1
    end
  else
     if tilecollide(enemies[3].x, enemies[3].y) == false then
      enemies[3].y += 1
      end
    end
  end 
end


--game over message is relayed when player dies 
for i in all (enemies) do
  if encollide(warrior.x, warrior.y, i.x, i.y) then
   gameover = true
   end
  end
  
  --resets level when player picks up eye of holiness
  goalcheck()
  
end --end of update function


--draw function
function _draw()
  cls()
  if gameover == false then
    spr(64,10,30,2,2)
    --ammo counter sprite
    spr(7,70,24,2,2)
    map(0,0,0,0,128,128)
    spr(warrior.sp, warrior.x, warrior.y)
    spr(enemies.sp, enemies.x, enemies.y)
    spr(ammo.sp, ammo.x, ammo.y)
    
    --draw enemies onto map
     for i in all (enemies) do  
      spr(5, i.x, i.y)
     end
    
    --draw tiles onto map
    for i in all (tiles) do
      spr(4, i.x, i.y)
    end
    
   
    --spawn goal item
    spr(18,goal.x*8,goal.y*8)
 
   --drawing bullets and missiles
    spr(17, bulx, buly)
    spr(19, missx, missy)
  
 
    --draw health onto map
    for health_loot in all (health_pickups) do  
       spr(health_loot.sp, health_loot.x, health_loot.y)
    end
  
     --draw armor onto map
      for armor_loot in all (armor_pickups) do  
       spr(armor_loot.sp, armor_loot.x, armor_loot.y)
      end
  
  print('health: '..health,10,10,3)
  print('armor: '..armor,10,20,7)
    
 else
    print('game over: you died! esc + type run', 0, 64)       
 end
end --end of draw function



--end of pgp program
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
































-->8
--cs477 pgp project
--developed by: radical ascension
--" battle of chaos"


__gfx__
000000000000000000000000999999999dddddd95000000500000000ddddddddddddd000b00bb00b000000000000000000000000000000000000000000000000
00000000004bb4000000000098988989d9dddd9d0544445000000000ddddddddddddd00006066060000000000000000000000000000000000000000000000000
0070070000baab00000bb00098888889dd9dd9dd08a88a8000000000dd4d4d4d44ddd00000666600000000000000000000000000000000000000000000000000
000770000b4bb4b0000dd00098888889ddd99ddd0888888000077000dd4d4d4d44ddd00008899880000000000000000000000000000000000000000000000000
000770000b8448b00001100098888889ddd99ddd008aa80000022000dd4d4d4d44ddd00008800880000000000000000000000000000000000000000000000000
00600700040bb04000b11b0098888889dd9dd9dd0888888000711700dd999d9999ddd0008a9999a8000000000000000000000000000000000000000000000000
0000000000bddb00001bb10098988989d9dddd9d0984489000177100dddd9d9dd9ddd00008a11a80000000000000000000000000000000000000000000000000
000000000440044000011000999999999dddddd90044440000011000dd999d9dd9ddd00008888800000000000000000000000000000000000000000000000000
55665666000000000000000000000000000000000000000000000000dddd9d9dd9ddd00000000000000000000000000000000000000000000000000000000000
55666666000000000000000000000000000000000000000000000000dd999d9999ddd00000000000000000000000000000000000000000000000000000000000
666665560000000000cc000000044000000000000000000000000000ddddddddddddd00000000000000000000000000000000000000000000000000000000000
656665560dde00000caac00001188400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66556666000000000ca8c00001188400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
665565660000000000cc000000044000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65666655000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66656565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b00000000000000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00600000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00060000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888888888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08cccccccccc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08cccccccccc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08cccccccccc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08444c4444cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08444c4444cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08c8a8c8a8cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08cccccccccc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08c9999999cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08c9aaaaa9cc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08cc99999ccc80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
01050401180501e050260502905029050290501e000300000c00025500270002a500306002a50027000275000c00025000275002a500306002a5002a000275000c00025000275002a50030600360003650033500
501500000f010140101a02021030190402a0401c0501d05026050130401c0402d0401b0402a040170401b04021040240500b070210501f0501e0601c07024050260502705028050170502c0502b0502905020050
01050000300501e05026050220501b050190501e050300500c04325525270252a525306152a52527025275250c04325025275252a525306152a5252a025275250c04325025275252a52530615360253652533525
000300000045001450064500c4500f45011450114500d45008450074500745008450084500a4500c4500d4500f450104501245013450154501645017450184501945019450194500000000000000000000000000
000100000a5500c5500d55011550125501455015550175501855018550195501a5501a5501b5501c5501d5501e5501b65019650176501565013650116500f6500d6500b6500a6500965007650066500265000650
0110000a0c04325025270252c025246152c0250c04325015270152c015246152a0152c015270150c04325015270152c015246152a0152c015270150c04325015270152c015246152a0152c0152c0250c04325015
0110000a0344506335082250a4150d3450323506425083150a3450d2350c0112a0152c015270150344506335082250a4150d3450323506425083150a3450d2350a3450d2350c0112a0152c015083150a3450d235
0910000a0f015125251401516525190150f525120151452516015195250c0152a0152c015270150f015125251401516525190150f52512015145251601519525195250c0152a0152c01527015145251601519525
0910000a25325273252c3252e3262a3252c325273251e05525325273272c3252a0152c0152701525325273252c3252e3262a3252c3252732527315220552b0550c04025025270252c025246152c0250c04325015
0010000a0c04325025270252c025246152c0250c04325015270152c015246152a0152c015270150c04325015270152c015246152a0152c01527015246152a0152c015270150c04325015270152c015246152a015
0010000a0344506335082250a4150d3450323506425083150a3450d2350c0112a0152c015270150344506335082250a4150d3450323506425083150a3450d2350c0112a0152c0152701503445063350d2350c011
0010000a0a3450d2350c0112a0152c015083150a3450d2350a3450d2350c0112a0152c01527015195250c0152a0152c0152701514525160151952516015195250c0152a0152c015270150f015125250f52512015
0110000a25325273272c3252a0152c0152701525325273252c3252e3262a3252c3252732527315220552b05525325273250c04025025270252c025246152c0250c043250150f5251201514525160151952527325
00030000066500a6500c6500d6500e6500f65010650126500a55012650126501265012650126501165010650106500f6500e6500d6500d6500c6500b6500a6500965007650066500565003650026500165000650
__music__
03 05060708
06 090a0b0c

